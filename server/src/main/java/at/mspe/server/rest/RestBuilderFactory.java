// Generated by RSD - Do not modify
package at.mspe.server.rest;

import jakarta.inject.Singleton;

import at.mspe.server.rest.model._JsonUtils;
import at.mspe.server.rest.model.BirthyearCohortDataImpl;
import at.mspe.server.rest.model.BirthyearCohortNewDataImpl;
import at.mspe.server.rest.model.BirthyearCohortPatchImpl;
import at.mspe.server.rest.model.CohortDataImpl;
import at.mspe.server.rest.model.CohortNewDataImpl;
import at.mspe.server.rest.model.CohortPatchImpl;
import at.mspe.server.rest.model.GenericCohortDataImpl;
import at.mspe.server.rest.model.GenericCohortNewDataImpl;
import at.mspe.server.rest.model.GenericCohortPatchImpl;
import at.mspe.server.rest.model.ParticipantDataImpl;
import at.mspe.server.rest.model.ParticipantNewDataImpl;
import at.mspe.server.rest.model.ParticipantPatchImpl;
import at.mspe.server.rest.model.SportEventDataImpl;
import at.mspe.server.rest.model.SportEventNewDataImpl;
import at.mspe.server.service.BuilderFactory;
import at.mspe.server.service.model._Base;
import at.mspe.server.service.model.BirthyearCohort;
import at.mspe.server.service.model.BirthyearCohortNew;
import at.mspe.server.service.model.Cohort;
import at.mspe.server.service.model.CohortNew;
import at.mspe.server.service.model.GenericCohort;
import at.mspe.server.service.model.GenericCohortNew;
import at.mspe.server.service.model.Participant;
import at.mspe.server.service.model.ParticipantNew;
import at.mspe.server.service.model.SportEvent;
import at.mspe.server.service.model.SportEventNew;

@Singleton
public class RestBuilderFactory implements BuilderFactory {
	@Override
	public <T extends _Base.BaseDataBuilder<?>> T builder(Class<T> type) {
		if (type == GenericCohortNew.DataBuilder.class) {
			return type.cast(GenericCohortNewDataImpl.builder());
		}
		if (type == BirthyearCohortNew.DataBuilder.class) {
			return type.cast(BirthyearCohortNewDataImpl.builder());
		}
		if (type == GenericCohort.DataBuilder.class) {
			return type.cast(GenericCohortDataImpl.builder());
		}
		if (type == GenericCohort.PatchBuilder.class) {
			return type.cast(GenericCohortPatchImpl.builder());
		}
		if (type == BirthyearCohort.DataBuilder.class) {
			return type.cast(BirthyearCohortDataImpl.builder());
		}
		if (type == BirthyearCohort.PatchBuilder.class) {
			return type.cast(BirthyearCohortPatchImpl.builder());
		}
		if (type == SportEventNew.DataBuilder.class) {
			return type.cast(SportEventNewDataImpl.builder());
		}
		if (type == SportEvent.DataBuilder.class) {
			return type.cast(SportEventDataImpl.builder());
		}
		if (type == ParticipantNew.DataBuilder.class) {
			return type.cast(ParticipantNewDataImpl.builder());
		}
		if (type == Participant.DataBuilder.class) {
			return type.cast(ParticipantDataImpl.builder());
		}
		if (type == Participant.PatchBuilder.class) {
			return type.cast(ParticipantPatchImpl.builder());
		}
		throw new IllegalArgumentException("Unsupported Builder '%s'".formatted(type));
	}

	public <T extends _Base.BaseData> T of(Class<T> type, String data) {
		if (type == GenericCohortNew.Data.class) {
			return type.cast(_JsonUtils.fromString(data, GenericCohortNewDataImpl::of));
		}
		if (type == BirthyearCohortNew.Data.class) {
			return type.cast(_JsonUtils.fromString(data, BirthyearCohortNewDataImpl::of));
		}
		if (type == GenericCohort.Data.class) {
			return type.cast(_JsonUtils.fromString(data, GenericCohortDataImpl::of));
		}
		if (type == GenericCohort.Patch.class) {
			return type.cast(_JsonUtils.fromString(data, GenericCohortPatchImpl::of));
		}
		if (type == BirthyearCohort.Data.class) {
			return type.cast(_JsonUtils.fromString(data, BirthyearCohortDataImpl::of));
		}
		if (type == BirthyearCohort.Patch.class) {
			return type.cast(_JsonUtils.fromString(data, BirthyearCohortPatchImpl::of));
		}
		if (type == SportEventNew.Data.class) {
			return type.cast(_JsonUtils.fromString(data, SportEventNewDataImpl::of));
		}
		if (type == SportEvent.Data.class) {
			return type.cast(_JsonUtils.fromString(data, SportEventDataImpl::of));
		}
		if (type == ParticipantNew.Data.class) {
			return type.cast(_JsonUtils.fromString(data, ParticipantNewDataImpl::of));
		}
		if (type == Participant.Data.class) {
			return type.cast(_JsonUtils.fromString(data, ParticipantDataImpl::of));
		}
		if (type == Participant.Patch.class) {
			return type.cast(_JsonUtils.fromString(data, ParticipantPatchImpl::of));
		}
		if (type == CohortNew.Data.class) {
			return type.cast(_JsonUtils.fromString(data, CohortNewDataImpl::of));
		}
		if (type == Cohort.Data.class) {
			return type.cast(_JsonUtils.fromString(data, CohortDataImpl::of));
		}
		if (type == Cohort.Patch.class) {
			return type.cast(_JsonUtils.fromString(data, CohortPatchImpl::of));
		}

		throw new IllegalArgumentException("Unsupported Builder '%s'".formatted(type));
	}
}
