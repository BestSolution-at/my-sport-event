// Generated by RSD - Do not modify
package at.mspe.server.rest;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.HeaderParam;
import jakarta.ws.rs.PATCH;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Produces;

import at.mspe.server.service.EventParticipantService;
import at.mspe.server.service.InvalidDataException;
import at.mspe.server.service.model.Participant;
import at.mspe.server.service.model.ParticipantNew;
import at.mspe.server.service.NotFoundException;

@ApplicationScoped
@Path("/api/sportevent/{eventKey}/participants")
@Produces(MediaType.APPLICATION_JSON)
public class EventParticipantResource {
	private final RestBuilderFactory builderFactory;
	private final EventParticipantService service;
	private final EventParticipantResourceResponseBuilder responseBuilder;

	@Inject
	public EventParticipantResource(EventParticipantService service, EventParticipantResourceResponseBuilder responseBuilder, RestBuilderFactory builderFactory) {
		this.builderFactory = builderFactory;
		this.service = service;
		this.responseBuilder = responseBuilder;
	}

	@GET
	@Path("{key}")
	public Response get(@PathParam("eventKey") String _eventKey) {
		var eventKey = _eventKey;
		try {
			var result = service.get(builderFactory, eventKey);
			return responseBuilder.get(result, eventKey).build();
		} catch (NotFoundException e) {
			return _RestUtils.toResponse(404, e);
		}
	}

	@GET
	public Response list(@PathParam("eventKey") String _eventKey) {
		var eventKey = _eventKey;
		var result = service.list(builderFactory, eventKey);
		return responseBuilder.list(result, eventKey).build();
	}

	@POST
	public Response create(
			@PathParam("eventKey") String _eventKey,
			String _participant) {
		var eventKey = _eventKey;
		var participant = builderFactory.of(ParticipantNew.Data.class, _participant);
		try {
			var result = service.create(builderFactory, eventKey, participant);
			return responseBuilder.create(result, eventKey, participant).build();
		} catch (InvalidDataException e) {
			return _RestUtils.toResponse(422, e);
		}
	}

	@PATCH
	@Path("{key}")
	public Response update(
			@PathParam("eventKey") String _eventKey,
			@PathParam("key") String _key,
			String _participant) {
		var eventKey = _eventKey;
		var key = _key;
		var participant = builderFactory.of(Participant.Patch.class, _participant);
		try {
			var result = service.update(builderFactory, eventKey, key, participant);
			return responseBuilder.update(result, eventKey, key, participant).build();
		} catch (NotFoundException e) {
			return _RestUtils.toResponse(404, e);
		} catch (InvalidDataException e) {
			return _RestUtils.toResponse(422, e);
		}
	}

	@DELETE
	@Path("{key}")
	public Response delete(
			@PathParam("eventKey") String _eventKey,
			@PathParam("key") String _key,
			@HeaderParam("version") Long _version) {
		var eventKey = _eventKey;
		var key = _key;
		var version = _version;
		try {
			service.delete(builderFactory, eventKey, key, version);
			return responseBuilder.delete(eventKey, key, version).build();
		} catch (NotFoundException e) {
			return _RestUtils.toResponse(404, e);
		} catch (InvalidDataException e) {
			return _RestUtils.toResponse(422, e);
		}
	}

}
