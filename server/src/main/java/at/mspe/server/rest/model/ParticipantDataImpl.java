// Generated by RSD - Do not modify
package at.mspe.server.rest.model;

import java.time.LocalDate;
import java.util.List;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

import at.mspe.server.service.model.Participant;

public class ParticipantDataImpl extends _BaseDataImpl implements Participant.Data {
	ParticipantDataImpl(JsonObject data) {
		super(data);
	}

	public String key() {
		return _JsonUtils.mapString(data, "key");
	}

	public long version() {
		return _JsonUtils.mapLong(data, "version");
	}

	public List<String> teamMates() {
		return _JsonUtils.mapStrings(data, "teamMates");
	}

	public String firstname() {
		return _JsonUtils.mapString(data, "firstname");
	}

	public String lastname() {
		return _JsonUtils.mapString(data, "lastname");
	}

	public String team() {
		return _JsonUtils.mapString(data, "team");
	}

	public LocalDate birthday() {
		return _JsonUtils.mapLocalDate(data, "birthday");
	}

	public static Participant.Data of(JsonObject obj) {
		return new ParticipantDataImpl(obj);
	}

	public String toString() {
		return "%s[%s=%s@%s=%s]".formatted(getClass().getSimpleName(), "key", key(), "version", version());
	}

	public static class DataBuilderImpl implements Participant.DataBuilder {
		private JsonObjectBuilder $builder = Json.createObjectBuilder();

		public Participant.DataBuilder key(String key) {
			$builder.add("key", key);
			return this;
		}

		public Participant.DataBuilder version(long version) {
			$builder.add("version", version);
			return this;
		}

		public Participant.DataBuilder teamMates(List<String> teamMates) {
			if (teamMates == null) {
				return this;
			}
			$builder.add("teamMates", _JsonUtils.toJsonStringArray(teamMates));
			return this;
		}

		public Participant.DataBuilder firstname(String firstname) {
			if (firstname == null) {
				return this;
			}
			$builder.add("firstname", firstname);
			return this;
		}

		public Participant.DataBuilder lastname(String lastname) {
			if (lastname == null) {
				return this;
			}
			$builder.add("lastname", lastname);
			return this;
		}

		public Participant.DataBuilder team(String team) {
			if (team == null) {
				return this;
			}
			$builder.add("team", team);
			return this;
		}

		public Participant.DataBuilder birthday(LocalDate birthday) {
			if (birthday == null) {
				return this;
			}
			$builder.add("birthday", birthday.toString());
			return this;
		}

		public Participant.Data build() {
			return new ParticipantDataImpl($builder.build());
		}
	}

	public static Participant.DataBuilder builder() {
		return new DataBuilderImpl();
	}
}
