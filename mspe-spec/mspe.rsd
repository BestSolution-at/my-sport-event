enum Gender = MALE | FEMALE | ALL;

mixin CohortBase {
    name: string
    gender: Gender
}

mixin BirthyearCohortBase {
    min: int
    max: int
}

record GenericCohortNew {
    include CohortBase
}

record BirthyearCohortNew {
    include CohortBase
    include BirthyearCohortBase
}

union CohortNew = GenericCohortNew("generic") | BirthyearCohortNew("birthyear");

patchable record GenericCohort {
    @id key: string
    @rev version: long

    include CohortBase
}

patchable record BirthyearCohort {
    @id key: string
    @rev version: long

    include CohortBase
    include BirthyearCohortBase
}

union Cohort = GenericCohort("generic") | BirthyearCohort("birthyear");

mixin SportEventBase {
    name: string
    date: zoned-date-time
}

record SportEventNew {
    include SportEventBase
}

patchable record SportEvent {
    @id key: string
    @rev version: long

    include SportEventBase
    @readonly participantCount: int
}

mixin ParticipantBase {
    firstname: string
    lastname: string
    team?: string
    birthday?: local-date
    gender: Gender
    association?: string
    cohortKey?: string
}

record ParticipantNew {
    include ParticipantBase
}

patchable record Participant {
    @id key: string
    @rev version: long

    include ParticipantBase

    @readonly teamMates: string[]
}

record UpdateResult {
    key: string
    version: long
}

error NotFound;
error InvalidData;
error StaleData;

service SportEvent {
    operation get(key: string): SportEvent 
        throws NotFound;
    
    operation list(): SportEvent[];
    
    operation create(event: SportEventNew): string 
        throws InvalidData;

    operation update(key: string, @patch event: SportEvent): UpdateResult 
        throws 
            NotFound 
            InvalidData 
            StaleData;
    
    operation delete(key: string, version?: long) 
        throws 
            NotFound 
            StaleData;
}

service EventCohort {
    operation get(eventKey: string, key: string): Cohort 
        throws NotFound;

    operation list(eventKey: string): Cohort[] 
        throws NotFound;

    operation create(eventKey: string, cohort: CohortNew): string
        throws 
            NotFound 
            InvalidData;

    operation update(eventKey: string, key: string, @patch cohort: Cohort): UpdateResult
        throws 
            NotFound 
            InvalidData 
            StaleData;

    operation delete(eventKey: string, key: string, version?: long)
        throws 
            NotFound 
            StaleData;
}

service EventParticipant {
    operation get(eventKey: string, key: string): Participant
        throws
            NotFound;
    
    operation list(eventKey: string): Participant[]
        throws
            NotFound;

    operation create(eventKey: string, participant: ParticipantNew): string
        throws
            NotFound
            InvalidData;

    operation update(eventKey: string, key: string, @patch participant: Participant): UpdateResult
        throws
            NotFound
            InvalidData
            StaleData;

    operation delete(eventKey: string, key: string, version?: long)
        throws
            NotFound
            StaleData;
}
