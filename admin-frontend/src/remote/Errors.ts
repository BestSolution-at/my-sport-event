// Generated by RSD - Do not modify
import type { RSDError } from './_result-utils.ts';
import { checkProp, isNumber, isRecord, isString } from './_type-utils.ts';

const errorTypes = new Set(['_Native', '_Status', 'NotFound', 'InvalidData', 'StaleData']);

export type ErrorType = '_Native' | '_Status' | 'NotFound' | 'InvalidData' | 'StaleData';

export function isKnownRSDError(value: unknown): value is RSDError<ErrorType> {
	return (
		isRecord(value) &&
		checkProp(value, '_type', isString, errorTypes.has.bind(errorTypes))
	);
}

export type NativeRSDError = RSDError<'_Native'> & {
	error: Error;
	message: string;
};

export type StatusRSDError = RSDError<'_Status'> & {
	status: number;
	message: string;
};

export type NotFoundError = RSDError<'NotFound'> & { message: string };
export type InvalidDataError = RSDError<'InvalidData'> & { message: string };
export type StaleDataError = RSDError<'StaleData'> & { message: string };

export function isNativeError(value: unknown): value is NativeRSDError {
	return (
		isRecord(value) &&
		checkProp(value, '_type', (v) => v === '_Native') &&
		checkProp(value, 'message', isString) &&
		checkProp(value, 'error', (v) => v instanceof Error)
	);
}

export function isStatusError(value: unknown): value is StatusRSDError {
	return (
		isRecord(value) &&
		checkProp(value, '_type', (v) => v === '_Status') &&
		checkProp(value, 'message', isString) &&
		checkProp(value, 'status', isNumber)
	);
}

export function isNotFoundError(value: unknown): value is NotFoundError {
	return (
		isRecord(value) &&
		checkProp(value, '_type', v => v === 'NotFound') &&
		checkProp(value, 'message', isString)
	);
}
export function isInvalidDataError(value: unknown): value is InvalidDataError {
	return (
		isRecord(value) &&
		checkProp(value, '_type', v => v === 'InvalidData') &&
		checkProp(value, 'message', isString)
	);
}
export function isStaleDataError(value: unknown): value is StaleDataError {
	return (
		isRecord(value) &&
		checkProp(value, '_type', v => v === 'StaleData') &&
		checkProp(value, 'message', isString)
	);
}
