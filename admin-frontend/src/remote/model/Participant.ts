// Generated by RSD - Do not modify
import { type Gender, isGender } from './Gender.ts';
import { checkOptProp, checkProp, createTypedArrayGuard, isNull, isNumber, isRecord, isString, propListValue, propValue } from '../_type-utils.ts';

export type Participant = {
	readonly key: string;
	readonly version: number;
	readonly teamMates: string[];
	readonly firstname: string;
	readonly lastname: string;
	readonly team?: string;
	readonly birthday?: string;
	readonly gender: Gender;
	readonly association?: string;
	readonly cohortKey?: string;
};

export function isParticipant(value: unknown): value is Participant {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isNumber) &&
		checkProp(value, 'teamMates', createTypedArrayGuard(isString)) &&
		checkProp(value, 'firstname', isString) &&
		checkProp(value, 'lastname', isString) &&
		checkOptProp(value, 'team', isString) &&
		checkOptProp(value, 'birthday', isString) &&
		checkProp(value, 'gender', isGender) &&
		checkOptProp(value, 'association', isString) &&
		checkOptProp(value, 'cohortKey', isString);
}

export function ParticipantFromJSON($value: Record<string, unknown>): Participant {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isNumber);
	const teamMates = propListValue('teamMates', $value, isString);
	const firstname = propValue('firstname', $value, isString);
	const lastname = propValue('lastname', $value, isString);
	const team = propValue('team', $value, isString, 'optional');
	const birthday = propValue('birthday', $value, isString, 'optional');
	const gender = propValue('gender', $value, isGender);
	const association = propValue('association', $value, isString, 'optional');
	const cohortKey = propValue('cohortKey', $value, isString, 'optional');
	return {
		key,
		version,
		teamMates,
		firstname,
		lastname,
		team,
		birthday,
		gender,
		association,
		cohortKey,
	};
}

export function ParticipantToJSON($value: Participant): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const teamMates = $value.teamMates;
	const firstname = $value.firstname;
	const lastname = $value.lastname;
	const team = $value.team;
	const birthday = $value.birthday;
	const gender = $value.gender;
	const association = $value.association;
	const cohortKey = $value.cohortKey;

	return {
		key,
		version,
		teamMates,
		firstname,
		lastname,
		team,
		birthday,
		gender,
		association,
		cohortKey,
	};
}

export type ParticipantPatch = {
	readonly key: string;
	readonly version: number;
	readonly firstname?: string;
	readonly lastname?: string;
	readonly team?: string | null;
	readonly birthday?: string | null;
	readonly gender?: Gender;
	readonly association?: string | null;
	readonly cohortKey?: string | null;
};

export function isParticipantPatch(value: unknown): value is ParticipantPatch {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isNumber) &&
		checkOptProp(value, 'firstname', isString) &&
		checkOptProp(value, 'lastname', isString) &&
		(checkOptProp(value, 'team', isNull) || checkOptProp(value, 'team', isString)) &&
		(checkOptProp(value, 'birthday', isNull) || checkOptProp(value, 'birthday', isString)) &&
		checkOptProp(value, 'gender', isGender) &&
		(checkOptProp(value, 'association', isNull) || checkOptProp(value, 'association', isString)) &&
		(checkOptProp(value, 'cohortKey', isNull) || checkOptProp(value, 'cohortKey', isString));
}

export function ParticipantPatchFromJSON($value: Record<string, unknown>): ParticipantPatch {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isNumber);
	const firstname = propValue('firstname', $value, isString, 'optional');
	const lastname = propValue('lastname', $value, isString, 'optional');
	const team = propValue('team', $value, isString, 'optional_null');
	const birthday = propValue('birthday', $value, isString, 'optional_null');
	const gender = propValue('gender', $value, isGender, 'optional');
	const association = propValue('association', $value, isString, 'optional_null');
	const cohortKey = propValue('cohortKey', $value, isString, 'optional_null');
	return {
		key,
		version,
		firstname,
		lastname,
		team,
		birthday,
		gender,
		association,
		cohortKey,
	};
}

export function ParticipantPatchToJSON($value: ParticipantPatch): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const firstname = $value.firstname;
	const lastname = $value.lastname;
	const team = $value.team;
	const birthday = $value.birthday;
	const gender = $value.gender;
	const association = $value.association;
	const cohortKey = $value.cohortKey;

	return {
		key,
		version,
		firstname,
		lastname,
		team,
		birthday,
		gender,
		association,
		cohortKey,
	};
}

