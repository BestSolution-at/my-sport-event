// Generated by RSD - Do not modify
import { checkOptProp, checkProp, createReplaceAddRemoveGuard, createTypedArrayGuard, isNumber, isRecord, isString, type ListMergeAddRemove, ListMergeAddRemoveFromJSON, type ListReplace, noopMap, propListValue, propMappedValue, propValue } from '../_type-utils.ts';

export type Participant = {
	readonly key: string;
	readonly version: number;
	readonly teamMates: string[];
	readonly firstname: string;
	readonly lastname: string;
	readonly team: string;
	readonly birthday: string;
};

export function isParticipant(value: unknown): value is Participant {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isNumber) &&
		checkProp(value, 'teamMates', createTypedArrayGuard(isString)) &&
		checkProp(value, 'firstname', isString) &&
		checkProp(value, 'lastname', isString) &&
		checkProp(value, 'team', isString) &&
		checkProp(value, 'birthday', isString);
}

export function ParticipantFromJSON($value: Record<string, unknown>): Participant {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isNumber);
	const teamMates = propListValue('teamMates', $value, isString);
	const firstname = propValue('firstname', $value, isString);
	const lastname = propValue('lastname', $value, isString);
	const team = propValue('team', $value, isString);
	const birthday = propValue('birthday', $value, isString);
	return {
		key,
		version,
		teamMates,
		firstname,
		lastname,
		team,
		birthday,
	};
}

export function ParticipantToJSON($value: Participant): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const teamMates = $value.teamMates;
	const firstname = $value.firstname;
	const lastname = $value.lastname;
	const team = $value.team;
	const birthday = $value.birthday;

	return {
		key,
		version,
		teamMates,
		firstname,
		lastname,
		team,
		birthday,
	};
}

type $TeamMatesReplace = ListReplace<string>;
type $TeamMatesMerge = ListMergeAddRemove<string, string>;
type $TeamMatesPatch = $TeamMatesReplace | $TeamMatesMerge;

export type ParticipantPatch = {
	readonly key: string;
	readonly version: number;
	readonly teamMates?: $TeamMatesPatch;
	readonly firstname?: string;
	readonly lastname?: string;
	readonly team?: string;
	readonly birthday?: string;
};

export function isParticipantPatch(value: unknown): value is ParticipantPatch {
	return isRecord(value) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isNumber) &&
		checkOptProp(value, 'teamMates', createReplaceAddRemoveGuard(isString)) &&
		checkOptProp(value, 'firstname', isString) &&
		checkOptProp(value, 'lastname', isString) &&
		checkOptProp(value, 'team', isString) &&
		checkOptProp(value, 'birthday', isString);
}

export function ParticipantPatchFromJSON($value: Record<string, unknown>): ParticipantPatch {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isNumber);
	const teamMates = propMappedValue('teamMates', $value, isRecord, v => ListMergeAddRemoveFromJSON(v, isString, noopMap, isString, noopMap), 'optional');
	const firstname = propValue('firstname', $value, isString, 'optional');
	const lastname = propValue('lastname', $value, isString, 'optional');
	const team = propValue('team', $value, isString, 'optional');
	const birthday = propValue('birthday', $value, isString, 'optional');
	return {
		key,
		version,
		teamMates,
		firstname,
		lastname,
		team,
		birthday,
	};
}

export function ParticipantPatchToJSON($value: ParticipantPatch): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const teamMates = $value.teamMates;
	const firstname = $value.firstname;
	const lastname = $value.lastname;
	const team = $value.team;
	const birthday = $value.birthday;

	return {
		key,
		version,
		teamMates,
		firstname,
		lastname,
		team,
		birthday,
	};
}

