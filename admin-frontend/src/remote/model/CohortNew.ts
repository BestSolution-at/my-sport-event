// Generated by RSD - Do not modify
import { type GenericCohortNew, GenericCohortNewFromJSON, GenericCohortNewToJSON, isGenericCohortNew } from './GenericCohortNew.ts';
import { type BirthyearCohortNew, BirthyearCohortNewFromJSON, BirthyearCohortNewToJSON, isBirthyearCohortNew } from './BirthyearCohortNew.ts';
import { isString } from '../_type-utils.ts';

export type CohortNew = GenericCohortNew | BirthyearCohortNew;

export function isCohortNew(value: unknown) {
	return isGenericCohortNew(value) || isBirthyearCohortNew(value);
}

export function CohortNewFromJSON(value: Record<string, unknown>): CohortNew {
	const descriminator = value['@type'];

	if(!isString(descriminator)) {
		throw new Error('No valid descriminator found');
	}
	switch(descriminator) {
		case 'generic':
			return GenericCohortNewFromJSON(value);
		case 'birthyear':
			return BirthyearCohortNewFromJSON(value);
		default:
			throw new Error(`Unknown descriminator "${descriminator}"`);
	}
}
export function CohortNewToJSON(value: CohortNew): Record<string, unknown> {
	const $desc = value['@type'];
	switch($desc) {
		case 'generic':
			return GenericCohortNewToJSON(value);
		case 'birthyear':
			return BirthyearCohortNewToJSON(value);
		default:
			throw new Error(`Unknown descriminator "${$desc}";`)
	}
}
