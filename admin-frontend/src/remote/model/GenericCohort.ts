// Generated by RSD - Do not modify
import { type Gender, isGender } from './Gender.ts';
import { checkOptProp, checkProp, createIsStringTypeGuard, isNumber, isRecord, isString, propValue } from '../_type-utils.ts';

export type GenericCohort = {
	'@type': 'generic';
	readonly key: string;
	readonly version: number;
	readonly name: string;
	readonly gender: Gender;
};

export function isGenericCohort(value: unknown): value is GenericCohort {
	return isRecord(value) &&
		checkProp(value, '@type', createIsStringTypeGuard('generic')) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isNumber) &&
		checkProp(value, 'name', isString) &&
		checkProp(value, 'gender', isGender);
}

export function GenericCohortFromJSON($value: Record<string, unknown>): GenericCohort {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isNumber);
	const name = propValue('name', $value, isString);
	const gender = propValue('gender', $value, isGender);
	return {
		'@type': 'generic',
		key,
		version,
		name,
		gender,
	};
}

export function GenericCohortToJSON($value: GenericCohort): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const name = $value.name;
	const gender = $value.gender;

	return {
		'@type': 'generic',
		key,
		version,
		name,
		gender,
	};
}

export type GenericCohortPatch = {
	'@type': 'patch:generic';
	readonly key: string;
	readonly version: number;
	readonly name?: string;
	readonly gender?: Gender;
};

export function isGenericCohortPatch(value: unknown): value is GenericCohortPatch {
	return isRecord(value) &&
		checkProp(value, '@type', createIsStringTypeGuard('patch:generic')) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isNumber) &&
		checkOptProp(value, 'name', isString) &&
		checkOptProp(value, 'gender', isGender);
}

export function GenericCohortPatchFromJSON($value: Record<string, unknown>): GenericCohortPatch {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isNumber);
	const name = propValue('name', $value, isString, 'optional');
	const gender = propValue('gender', $value, isGender, 'optional');
	return {
		'@type': 'patch:generic',
		key,
		version,
		name,
		gender,
	};
}

export function GenericCohortPatchToJSON($value: GenericCohortPatch): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const name = $value.name;
	const gender = $value.gender;

	return {
		'@type': 'patch:generic',
		key,
		version,
		name,
		gender,
	};
}

