// Generated by RSD - Do not modify
import {
	checkOptProp,
	checkProp,
	createIsStringTypeGuard,
	isNumber,
	isRecord,
	isString,
	propValue,
} from '../_type-utils.ts';

export type GenericCohort = {
	'@type': 'generic';
	readonly key: string;
	readonly version: number;
	readonly name: string;
};

export function isGenericCohort(value: unknown): value is GenericCohort {
	return (
		isRecord(value) &&
		checkProp(value, '@type', createIsStringTypeGuard('generic')) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isNumber) &&
		checkProp(value, 'name', isString)
	);
}

export function GenericCohortFromJSON($value: Record<string, unknown>): GenericCohort {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isNumber);
	const name = propValue('name', $value, isString);
	return {
		'@type': 'generic',
		key,
		version,
		name,
	};
}

export function GenericCohortToJSON($value: GenericCohort): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const name = $value.name;

	return {
		'@type': 'generic',
		key,
		version,
		name,
	};
}

export type GenericCohortPatch = {
	'@type': 'patch:generic';
	readonly key: string;
	readonly version: number;
	readonly name?: string;
};

export function isGenericCohortPatch(value: unknown): value is GenericCohortPatch {
	return (
		isRecord(value) &&
		checkProp(value, '@type', createIsStringTypeGuard('generic')) &&
		checkProp(value, 'key', isString) &&
		checkProp(value, 'version', isNumber) &&
		checkOptProp(value, 'name', isString)
	);
}

export function GenericCohortPatchFromJSON($value: Record<string, unknown>): GenericCohortPatch {
	const key = propValue('key', $value, isString);
	const version = propValue('version', $value, isNumber);
	const name = propValue('name', $value, isString, 'optional');
	return {
		'@type': 'patch:generic',
		key,
		version,
		name,
	};
}

export function GenericCohortPatchToJSON($value: GenericCohortPatch): Record<string, unknown> {
	const key = $value.key;
	const version = $value.version;
	const name = $value.name;

	return {
		'@type': 'patch:generic',
		key,
		version,
		name,
	};
}
