// Generated by RSD - Do not modify
import { ifDefined, safeExecute, type ServiceProps } from './_fetch-type-utils.ts';
import { api } from '../index.ts';

export function createSportEventService(props: ServiceProps<api.service.ErrorType>): api.service.SportEventService {
	return {
		get: fnGet(props),
		list: fnList(props),
		create: fnCreate(props),
		update: fnUpdate(props),
		delete: fnDelete(props),
	};
}
function fnGet(props: ServiceProps<api.service.ErrorType>): api.service.SportEventService['get'] {
	const { baseUrl, fetchAPI = fetch, lifecycleHandlers = {} } = props;
	const { preFetch, onSuccess, onError, onCatch, final } = lifecycleHandlers;
	return async (key: string) => {
		try {
			const $init = (await preFetch?.('get')) ?? {};
			const $headers = new Headers($init.headers ?? {});
			$headers.append('Content-Type', 'application/json');
			$init.headers = $headers;

			const $path = `${baseUrl}/api/sportevent/${key}`;
			const $response = await fetchAPI($path, { ...$init, method: 'GET' });

			if ($response.status === 200) {
				const $data = await $response.json();
				const $result = api.model.SportEventFromJSON($data);
				return safeExecute(api.result.OK($result), () => onSuccess?.('get', $result));
			} else if ($response.status === 404) {
				const err = {
					_type: 'NotFound',
					message: await $response.text(),
				} as const;
				return safeExecute(api.result.ERR(err), () => onError?.('get', err));
			}
			const err = { _type: '_Status', message: $response.statusText, status: $response.status } as const;
			return api.result.ERR(err);
		} catch (e) {
			onCatch?.('get', e);
			const ee = e instanceof Error ? e : new Error('', { cause: e });
			const err = { _type: '_Native', message: ee.message, error: ee } as const;
			return api.result.ERR(err);
		} finally {
			final?.('get');
		}
	};
}

function fnList(props: ServiceProps<api.service.ErrorType>): api.service.SportEventService['list'] {
	const { baseUrl, fetchAPI = fetch, lifecycleHandlers = {} } = props;
	const { preFetch, onSuccess, onCatch, final } = lifecycleHandlers;
	return async () => {
		try {
			const $init = (await preFetch?.('list')) ?? {};
			const $headers = new Headers($init.headers ?? {});
			$headers.append('Content-Type', 'application/json');
			$init.headers = $headers;

			const $path = `${baseUrl}/api/sportevent/`;
			const $response = await fetchAPI($path, { ...$init, method: 'GET' });

			if ($response.status == 200) {
				const $data = await $response.json();
				if (!api.utils.isArray) {
					throw new Error('Invalid result');
				}
				const $result = $data.map(api.model.SportEventFromJSON);
				return safeExecute(api.result.OK($result), () => onSuccess?.('list', $result));
			}
			const err = { _type: '_Status', message: $response.statusText, status: $response.status } as const;
			return api.result.ERR(err);
		} catch (e) {
			onCatch?.('list', e);
			const ee = e instanceof Error ? e : new Error('', { cause: e });
			const err = { _type: '_Native', message: ee.message, error: ee } as const;
			return api.result.ERR(err);
		} finally {
			final?.('list');
		}
	};
}

function fnCreate(props: ServiceProps<api.service.ErrorType>): api.service.SportEventService['create'] {
	const { baseUrl, fetchAPI = fetch, lifecycleHandlers = {} } = props;
	const { preFetch, onSuccess, onError, onCatch, final } = lifecycleHandlers;
	return async (event: api.model.SportEventNew) => {
		try {
			const $init = (await preFetch?.('create')) ?? {};
			const $headers = new Headers($init.headers ?? {});
			$headers.append('Content-Type', 'application/json');
			$init.headers = $headers;

			const $path = `${baseUrl}/api/sportevent/`;
			const $body = JSON.stringify(api.model.SportEventNewToJSON(event));
			const $response = await fetchAPI($path, { ...$init, method: 'POST', body: $body });
			if ($response.status === 201) {
				const $data = await $response.json();
				return safeExecute(api.result.OK($data), () => onSuccess?.('create', $data));
			} else if ($response.status === 422) {
				const err = {
					_type: 'InvalidData',
					message: await $response.text(),
				} as const;
				return safeExecute(api.result.ERR(err), () => onError?.('create', err));
			}
			const err = { _type: '_Status', message: $response.statusText, status: $response.status } as const;
			return api.result.ERR(err);
		} catch (e) {
			onCatch?.('create', e);
			const ee = e instanceof Error ? e : new Error('', { cause: e });
			const err = { _type: '_Native', message: ee.message, error: ee } as const;
			return api.result.ERR(err);
		} finally {
			final?.('create');
		}
	};
}

function fnUpdate(props: ServiceProps<api.service.ErrorType>): api.service.SportEventService['update'] {
	const { baseUrl, fetchAPI = fetch, lifecycleHandlers = {} } = props;
	const { preFetch, onSuccess, onError, onCatch, final } = lifecycleHandlers;
	return async (key: string, event: api.model.SportEventPatch) => {
		try {
			const $init = (await preFetch?.('update')) ?? {};
			const $headers = new Headers($init.headers ?? {});
			$headers.append('Content-Type', 'application/json');
			$init.headers = $headers;

			const $path = `${baseUrl}/api/sportevent/${key}`;
			const $body = JSON.stringify(api.model.SportEventPatchToJSON(event));
			const $response = await fetchAPI($path, { ...$init, method: 'PATCH', body: $body });
			if ($response.status === 200) {
				const $data = await $response.json();
				const $result = api.model.UpdateResultFromJSON($data);
				return safeExecute(api.result.OK($result), () => onSuccess?.('update', $result));
			} else if ($response.status === 404) {
				const err = {
					_type: 'NotFound',
					message: await $response.text(),
				} as const;
				return safeExecute(api.result.ERR(err), () => onError?.('update', err));
			} else if ($response.status === 422) {
				const err = {
					_type: 'InvalidData',
					message: await $response.text(),
				} as const;
				return safeExecute(api.result.ERR(err), () => onError?.('update', err));
			} else if ($response.status === 412) {
				const err = {
					_type: 'StaleData',
					message: await $response.text(),
				} as const;
				return safeExecute(api.result.ERR(err), () => onError?.('update', err));
			}
			const err = { _type: '_Status', message: $response.statusText, status: $response.status } as const;
			return api.result.ERR(err);
		} catch (e) {
			onCatch?.('update', e);
			const ee = e instanceof Error ? e : new Error('', { cause: e });
			const err = { _type: '_Native', message: ee.message, error: ee } as const;
			return api.result.ERR(err);
		} finally {
			final?.('update');
		}
	};
}

function fnDelete(props: ServiceProps<api.service.ErrorType>): api.service.SportEventService['delete'] {
	const { baseUrl, fetchAPI = fetch, lifecycleHandlers = {} } = props;
	const { preFetch, onSuccess, onError, onCatch, final } = lifecycleHandlers;
	return async (key: string, version?: number) => {
		try {
			const $init = (await preFetch?.('delete')) ?? {};
			const $headers = new Headers($init.headers ?? {});
			$headers.append('Content-Type', 'application/json');
			ifDefined(version, v => $headers.append('version', `${v}`));
			$init.headers = $headers;

			const $path = `${baseUrl}/api/sportevent/${key}`;
			const $response = await fetchAPI($path, { ...$init, method: 'DELETE' });

			if ($response.status === 200) {
				return safeExecute(api.result.OK(api.result.Void), () => onSuccess?.('delete', api.result.Void));
			} else if ($response.status === 404) {
				const err = {
					_type: 'NotFound',
					message: await $response.text(),
				} as const;
				return safeExecute(api.result.ERR(err), () => onError?.('delete', err));
			} else if ($response.status === 412) {
				const err = {
					_type: 'StaleData',
					message: await $response.text(),
				} as const;
				return safeExecute(api.result.ERR(err), () => onError?.('delete', err));
			}
			const err = { _type: '_Status', message: $response.statusText, status: $response.status } as const;
			return api.result.ERR(err);
		} catch (e) {
			onCatch?.('delete', e);
			const ee = e instanceof Error ? e : new Error('', { cause: e });
			const err = { _type: '_Native', message: ee.message, error: ee } as const;
			return api.result.ERR(err);
		} finally {
			final?.('delete');
		}
	};
}
